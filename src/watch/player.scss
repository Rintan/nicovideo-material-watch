// コンテキストメニューのクリックイベント領域確保のため Flex は使わない
.MainContainer {
  position: absolute;
  top: 0;
  left: 0;
  padding: 20px 0;
  width: var(--width);
  background-color: #181818;
  box-sizing: content-box;

  &:before {
    content: '';
    height: 100%;
    background-color: #181818;
    position: absolute;
    top: 0;
    left: calc((var(--width) - 100vw) / 2);
    right: calc(((var(--width) - 100vw) / 2) + 40px);
  }

  // 左辺
  &-player {
    width: var(--left-width);
    padding-bottom: 32px;

    &:hover {
      > .PlayerContainer {
        .ControllerBoxContainer {
          background: transparent linear-gradient(transparent, rgba(0, 0, 0, 0.5));
        }

        .SeekBarContainer,
        .ControllerContainer {
          opacity: 1;
        }
      }

      + .MainContainer-commentPanel {
        > .VideoMenuContainer {
          > .VideoMenuContainer-area {
            &:first-child {
              opacity: 1;
            }
          }
        }
      }
    }
  }
}


.PlayerContainer {
  background-color: transparent;
  overflow: visible;
}

.VideoContainer {
  // 準備中...
  &.is-preparing {
    > .Spinner {
      display: block;
    }
  }

  // 読み込み中...
  @include spinner(
    $selector: '> .Spinner',
    $circleSize: 40px,
    $lineWidth: 5px,
    $lineColor: var(--primary-color-1),
    $backgroundColor: #000
  ) {
    position: absolute;
    top: calc(50% - 20px);
    left: calc(50% - 20px);
    z-index: 10;
    display: none;

    > svg {
      display: none;
    }
  }
}

// 再生ボタン
.VideoStartButtonContainer {
  position: absolute;
  top: auto;
  left: auto;
  transform: none;
  width: 100%;
  height: 100%;

  &:empty {
    display: none;
  }

  &-button {
    width: 100%;
    height: 100%;
    cursor: default;

    > svg {
      display: none;
    }
  }
}

// 設定
.PlayerOptionContainer {
  position: absolute;
  top: 42px;
  bottom: -22px;
  left: calc(100% + 10px);
  right: auto;
  padding: 0;
  background-color: #fff;
  width: 340px;
  border-radius: 2px;
  overflow: auto;
  transition: .3s all $ease-out-quart;
  transform-origin: left calc(100% - 22px);
  display: block;

  &.is-hidden {
    opacity: 0;
    transform: scale(0);
  }

  &-area {
    + .PlayerOptionContainer-area {
      border-top: 1px #e0e0e0 solid;
    }
  }

  .PlayerOptionMenu {
    height: auto;
    display: block;
    padding: 10px 0;
  }

  .PlayerOptionMenuItem {
    background-color: transparent;
    padding: 8px 16px;
    margin: 0;
    display: flex;
    justify-content: space-between;
    align-items: center;

    + .PlayerOptionMenuItem {
      border-top: 1px #e0e0e0 solid;
    }

    &-title {
      color: #303030;
      margin: 0;
      font-size: 1.2rem;
      flex: 2;
    }

    &-content {
      flex: 1;

      // アンケート設定リンク
      .NicoenqueteSettingItem-link {
        @include flatButton;
        font-size: 0;
        height: auto;
        background-color: transparent;
        line-height: inherit;
        min-width: initial;
        color: #c0c0c0;

        &:hover {
          color: #808080;
        }

        &:active {
          color: #f0f0f0;
        }

        &::before {
          @include icon;
          content: '\f1a3';
          font-size: 1.6rem;
        }
      }
    }

    .HelpLink {
      display: none;
    }

    // 無理やりトグルスイッチにする呪文
    &.PlayerOptionPremiumMenuItem {
      .PlayerOptionRadioGroup {
        &-inner {
          flex-direction: row;
        }
      }

      .RadioItem {
        padding: 5px 0;
        margin: 0;
        overflow: hidden;

        &:first-child {
          padding-left: 5px;
          margin-left: -5px;
        }

        &:last-child {
          padding-right: 5px;
        }

        input[type="radio"] {
          &:checked {
            + .RadioItem-label {
              &[for$="-on"] {
                background-color: var(--primary-color-2);

                &::before {
                  transform: translate3d(0, 0, 0);
                  background-color: var(--primary-color-1);
                }
              }

              &[for$="off"] {
                background-color: #d0d0d0;

                &::before {
                  transform: translate3d(0, 0, 0);
                  background-color: #fff;
                }
              }
            }
          }
        }

        &-label {
          font-size: 0;
          width: 20px;
          height: 16px;
          padding: 0;
          min-width: initial;
          line-height: inherit;
          position: relative;

          &[for$="-on"] {
            background-color: #d0d0d0;
            border-radius: 0 8px 8px 0;

            &::before {
              transform: translate3d(-100%, 0, 0);
              background-color: #fff;
            }
          }

          &[for$="-off"] {
            background-color: var(--primary-color-2);
            border-radius: 8px 0 0 8px;

            &::before {
              transform: translate3d(100%, 0, 0);
              background-color: var(--primary-color-1);
            }
          }

          &::before {
            content: '';
            display: inline-block;
            width: 20px;
            height: 20px;
            border-radius: 100%;
            box-shadow: 0 1px 2px rgba(0,0,0,.3);
            position: absolute;
            top: calc(50% - 10px);
            left: 0;
            transition: all .3s $ease-out-quart;
          }
        }
      }
    }
  }
}

// ラジオボタン
.PlayerOptionRadioGroup {
  &-inner {
    display: flex;
    flex-direction: column;
    background-color: transparent;
    border-radius: 0;
    overflow: visible;
  }
}

.RadioItem {
  + .RadioItem {
    margin-top: 8px;
  }

  input[type="radio"]:not([id$="-on"]):not([id$="-off"]) {
    &:checked {
      + .RadioItem-label {
        color: inherit;
        background-color: transparent;
        border-radius: 0;

        &::before {
          background-color: var(--primary-color-1);
          box-shadow: 0 0 0 2px var(--primary-color-1);
          animation: radioButton .3s $ease-out-quart;
        }
      }
    }
  }

  &-label:not([for$="-on"]):not([for$="-off"]) {
    padding: 0;
    font-size: 1.2rem;
    text-align: left;
    line-height: 2rem;
    height: auto;
    min-width: initial;

    &::before {
      content: '';
      width: 16px;
      height: 16px;
      display: inline-block;
      border: 3px #fff solid;
      box-shadow: 0 0 0 2px #333;
      box-sizing: border-box;
      border-radius: 100%;
      margin-right: 8px;
      vertical-align: middle;
      transition: all .3s $ease-out-quart;
    }
  }
}

@keyframes radioButton {
  0% {
    transform: scale(.5);
  }
  100% {
    transform: scale(1);
  }
}

// セレクトフィールド
.PlayerOptionDropdown {
  width: 100%;
  line-height: 3rem;

  &.dropdown--active {
    .dropdown__content {
      transition: all .3s $ease-out-quart;
      transform: scaleY(1);
      opacity: 1;
    }
  }

  &-toggle {
    background-color: transparent;
    height: auto;
    line-height: inherit;
    font-size: inherit;
    padding: 0;
    border-radius: 0;
    border-bottom: 1px #e0e0e0 solid;
    position: relative;
    width: 100%;
  }

  &-toggleLabel {
    color: #888;
    margin: 0;
  }

  &-toggleArrow {
    width: auto;
    height: auto;
    position: static;

    &::after {
      border-top-color: #888;
      border-width: 5px 5px 0;
      position: absolute;
      top: calc(50% - 2.5px);
      right: 4px;
      transform: none;
    }
  }

  &-menu {
    background-color: #fff;
    border: none;
    border-radius: 0;
    padding: 10px 0;
    box-shadow: 0 1px 2px rgba(0,0,0,.4);
    display: block;
    opacity: 0;
    transform: scaleY(0);
    transform-origin: top;
    transition: opacity .3s $ease-out-quart, transform 0s .5s;
    top: -10px;
    left: 0;
    right: 0;
    white-space: nowrap;
  }
}

.PlayerOptionDropdownItem {
  margin: 0;
  height: auto;

  &:hover,
  &.is-selected {
    .PlayerOptionDropdownItem-inner {
      color: inherit;
      background-color: #f0f0f0;
    }
  }

  &-inner {
    width: 100%;
    line-height: 3rem;
    padding: 0 16px;
    font-size: 1.3rem;
    text-align: left;
    color: #303030;
    border-radius: 0;
    overflow: visible;
    cursor: pointer;
    transition: background-color .3s $ease-out-quart;

    &:hover {
      all: inherit;
    }
  }
}

.ControllerBoxContainer {
  position: absolute;
  bottom: 0;
  z-index: 10;
  width: 100%;
  height: auto;
  padding-top: 8px;
  background-color: transparent;
}

.SeekBarContainer,
.ControllerContainer {
  opacity: 0;
  transition: opacity .2s ease-out;
}

.ControllerContainer {
  padding: 0;

  &-area {
    &:nth-child(-n+2) {
      flex: 0;
    }
  }

  &-centerArea {
    padding-left: 8px;
  }
}

// シークバー
.SeekBar {
  background-color: rgba(255,255,255,.3);

  &-hover {
    background-color: rgba(255,255,255,.7);
  }

  &-buffered {
    background-color: rgba(255,255,255,.5);
  }

  &-played,
  .SeekBarHandle-handle {
    background-color: var(--primary-color-1);
  }
}

// シークプレビュー
.SeekBarStoryboard {
  top: -10px;

  .Storyboard {
    border: 2px #121212 solid;
  }

  + .SeekBarTimeTip {
    &-time {
      border-radius: 2px 2px 0 0;

      &::before {
        border-top-color: rgba(0,0,0,.8);
      }
    }
  }
}

.SeekBarTimeTip {
  top: -12px;

  &-time {
    background-color: rgba(0,0,0,.8);
    padding: 0 5px;
    line-height: 2rem;
    font-weight: bold;
    border-radius: 2px;
    font-size: 1.1rem;
    position: relative;

    &::before {
      content: '';
      border-style: solid;
      border-width: 5px 5px 0 5px;
      border-color: #121212 transparent transparent transparent;
      position: absolute;
      top: 100%;
      left: calc(50% - 5px);
    }
  }
}

// コメント投稿
.CommentPostContainer {
  display: flex;
  position: absolute;
  top: 100%;

  &.is-fullscreen {
    position: relative;
  }

  > .GridCell {
    background-color: #303030;
    border: none;
    color: #f0f0f0;
  }

  &-commandInput {
    flex: 30%;

    .CommentCommandInput {
      color: currentColor;
    }
  }

  &-commentInput {
    flex: 50%;

    .CommentInput-textarea {
      color: currentColor;
    }
  }

  &-postButton {
    flex: 20%;

    .CommentPostButton {
      width: 100%;
      background-color: #202020;
      color: #f0f0f0;
      transition: background .2s ease-out;

      &:hover {
        background-color: var(--primary-color-1);
      }

      &:active {
        background-color: var(--primary-color-5);
      }
    }
  }
}

// アイコン
.ControllerButton {
  width: 36px;
  height: 36px;
  padding: 0;
  color: #e0e0e0;
  text-shadow: 0 0 2px rgba(0,0,0,.3);

  &:hover {
    color: #f0f0f0;
  }

  &::before {
    @include icon;
    font-size: 2rem;
    line-height: 2rem;
    color: currentColor;
  }

  svg {
    display: none;
  }
}

.SeekToHeadButton,
.PlayerSeekBackwardButton,
.PlayerSeekForwardButton,
.PlayerSkipNextButton {
  display: none;
}

.PlayerPlayTime {
  text-shadow: none;
  height: auto;
}

.PlayerPlayButton,
.PlayerPauseButton {
  width: 46px;
}

.PlayerPlayButton {
  &::before {
    content: '\f3aa';
  }
}

.PlayerPauseButton {
  &::before {
    content: '\f3a7';
  }
}

.MuteVideoButton {
  &::before {
    content: '\f3bc';
  }

  &:hover {
    + .VolumeBarContainer {
      width: 60px;
    }
  }
}

.UnMuteVideoButton {
  &::before {
    content: '\f3bb';
  }
}

.PlayerRepeatOnButton {
  &::before {
    content: '\f3ae';
  }
}

.PlayerRepeatOffButton {
  &::before {
    content: '\f3ad';
  }
}

.CommentOnOffButton {
  &[data-title='コメントを表示する']::before {
    content: '\f261';
  }

  &[data-title='コメントを表示しない']::before {
    content: '\f265';
  }
}

.EnableFullScreenButton {
  &::before {
    content: '\f16d';
  }
}

.DisableFullScreenButton {
  &::before {
    content: '\f16c';
  }
}

.PlayerOptionButton {
  &::before {
    content: '\f1c6';
  }
}

// 音量
.VolumeBarContainer {
  width: 0;
  transition: width .2s ease-out;

  &:hover {
    width: 60px;
  }

  .VolumeBar {
    background-color: rgba(255,255,255,.3);

    &:hover {
      height: 4px;

      .ProgressBar {
        height: 4px;
        bottom: 4px;
      }
    }

    .VolumeBar-progress {
      background-color: var(--primary-color-1);
    }
  }
}

// ニコ割
.MarqueeContainer {
  display: none;
}

// コメント欄下部広告
.NicoSpotAdContainer,
.MiniBannerAdContainer {
  display: none;
}

// 右辺
.MainContainer-commentPanel {
  position: absolute;
  top: 20px;
  right: 0;
  bottom: 20px;
  width: var(--right-width);
}

// メニュー内アクションボタン共通設定
.VideoMenuContainer,
.CommentPanelMenuContainer {
  .ActionButton {
    width: auto;
    height: auto;
    margin: 0;
    padding: 0;
    color: #424242;

    &.is-active {
      color: var(--primary-color-1);
    }

    &:hover:not(.is-active) {
      color: #626262;
    }

    &::before {
      @include icon;
      font-size: 1.6rem;
      line-height: 3.2rem;
      width: 32px;
      height: 32px;
    }

    > svg {
      display: none;
    }
  }
}

// メニュー
.VideoMenuContainer {
  position: absolute;
  left: 0;
  top: 0;
  display: flex;
  z-index: 10;
  width: auto;
  height: auto;

  &:before {
    display: none;
  }

  .ActionButton {
    // とりあえずマイリスト
    &.InstantMylistButton {
      &::before {
        content: '\f278';
      }

      &::after {
      }

      &.is-succeeded,
      &.is-failed {
        &::after {
          padding: 0 8px;
          line-height: 2.5rem;
          border-radius: 2px;
        }
      }

      // 登録成功!
      &.is-succeeded {
        &::before {
          content: '\f26b';
        }

        &::after {
          background-color: var(--primary-color-1);
        }
      }

      // 登録失敗...
      &.is-failed {
        &::after {
          background-color: #ef5350;
        }
      }
    }

    &[data-title='マイリスト'] {
      &::before {
        content: '\f3ac';
      }
    }

    &.UadButton {
      &::before {
        content: '\f166';
      }
    }

    &.TwitterShareButton {
      &:hover {
        color: #55acee;
      }

      &::before {
        content: '\f360';
      }
    }

    &.FacebookShareButton {
      &:hover {
        color: #3b5999;
      }

      &::before {
        content: '\f343';
      }
    }

    &.LineShareButton {
      &:hover {
        color: #00c300;
      }

      &::before {
        content: 'LINE';
        font-size: 1rem;
        font-weight: bold;
      }
    }

    &.SharePanelVisibleButton {
      background-color: transparent;

      &::before {
        content: '\f35b';
      }
    }
  }

  .UadButtonBalloon {
    display: none;
  }

  &-area {
    padding: 0;

    // 動画操作メニュー
    &:first-child {
      position: absolute;
      right: 100%;
      margin: 16px 16px 0 0;
      opacity: 0;
      transition: opacity .2s ease-out;

      &:hover {
        opacity: 1;
      }

      > * {
        + * {
          margin-top: 10px;
        }
      }

      .ActionButton {
        color: #f0f0f0;

        &::before {
          font-size: 1.8rem;
          line-height: 3.6rem;
          background-color: rgba(0,0,0,.6);
          width: 36px;
          height: 36px;
          border-radius: 100%;
          box-shadow: 0 1px 2px rgba(0,0,0,.3);
        }

        &:hover {
          color: var(--primary-color-1);
        }
      }
    }

    // 動画共有メニュー
    &:last-child {
      padding-left: 8px;
    }
  }
}


.CommentPanelContainer {
  top: 0;
  bottom: 0;
  width: var(--right-width);
  background-color: #202020;

  // 読み込み中
  &-loadingContainer {
    position: absolute;
    top: 62px;
    left: 0;
    bottom: 0;
    right: 0;
    background-color: #222;
    display: flex;
    align-items: center;
    justify-content: center;

    @include spinner(
      $selector: '> .Spinner',
      $circleSize: 40px,
      $lineWidth: 5px,
      $lineColor: var(--primary-color-1),
      $backgroundColor: #222
    ) {
      svg {
        display: none;
      }
    }
  }
}

// コメントパネルメニュー
.CommentPanelMenuContainer {
  border: none;

  // 過去ログ
  &.is-pastCommentMode {
    // おまけにスレッドセレクトを表示
    > .CommentPanelMenuContainer-mainMenu {
      > .CommentPanelMenuContainer-mainMenuArea {
        &:first-child {
          display: block;
        }
      }
    }

    .CommentPanelMenuContainer-pastCommentMenu {
      position: absolute;
      background-color: #fff;
      top: 50px;
      left: calc(50% - 160px);
      z-index: 10;
      padding: 20px;
      height: auto;
      width: 320px;
      box-shadow: 0 1px 15px rgba(0,0,0,.5);
      border-radius: 2px;

      > .GridCell {
        display: flex;
        flex-direction: column;
      }

      .DateTimeInput {
        margin: 0;
        display: flex;

        > input {
          @include textField;
          margin: 0;
          box-shadow: none;
          height: auto;

          + input {
            margin-left: 8px;
          }

          &.DateTimeInput-date {
            flex: 1;
          }

          &.DateTimeInput-time {
            width: 92px;
          }
        }
      }

      .PastCommentFetchButton {
        @include raisedButton--primary;
        width: auto;
        height: auto;
        line-height: inherit;
        align-self: flex-end;
        margin-top: 8px;
        font-size: 1.2rem;
      }
    }
  }

  .ActionButton {
    &.CalendarButton {
      &::before {
        content: '\f331';
      }
    }

    &.ReloadButton {
      &::before {
        content: '\f3b2';
      }
    }

    &.CommentPanelAutoScrollButton {
      &::before {
        content: '\f2f1';
      }
    }

    &[data-title='NG設定'] {
      &::before {
        content: '\f15b';
      }
    }
  }

  // コメント操作メニュー
  &-mainMenu {
    padding: 0;
    width: auto;
    height: auto;

    &Area {
      // スレッド変更メニュー
      &:first-child {
        display: none;
        position: absolute;
        left: 40px;
        top: 108px;
        z-index: 15;

        > .DropDownMenu {
          border: none;
          background-color: transparent;
          -webkit-appearance: none;
          border-bottom: 1px #e0e0e0 solid;
          border-radius: 0;
          padding: 0 10px;
          line-height: 2.8rem;
          cursor: pointer;
          outline: none;
        }
      }

      // スレッド操作メニュー
      &:last-child {
        padding-right: 8px;
      }
    }
  }
}

.CommentPanel {
  top: 32px;
  color: #888;

  .react-grid {
    &-Header {
      position: relative;
      box-shadow: 0 1px 2px rgba(0,0,0,.3);
      z-index: 5;
      background-color: #303030;
    }

    &-HeaderCell {
      &-sortable {
        overflow: hidden;

        &--ascending,
        &--descending {
          &::before {
            @include icon;
            font-size: 1.4rem;
            line-height: 2.8rem;
            margin-right: 6px;
            color: #505050;
            vertical-align: top;
          }
        }

        &--ascending {
          &::before {
            content: '\f1cd';
          }
        }

        &--descending {
          &::before {
            content: '\f1ce';
          }
        }

        .pull-right {
          display: none;
        }
      }

      &__draggable {
        background-color: rgba(0,0,0,.15);
        width: 5px;
      }
    }

    &-Cell,
    &-HeaderCell {
      background-color: transparent;
      border: none;
      font-weight: normal;
    }

    &-Canvas {
      @include commentPanelScrollbar;
    }

    &-Row {
      &:hover {
        background-color: #282828;
      }

      > div {
        &:first-child {
          color: #f0f0f0;
        }
      }
    }
  }
}

// コンテキストメニュー
.ContextMenu {
  position: absolute;
  width: 300px;
  box-shadow: 0 1px 5px rgba(0,0,0,.3);
  border-radius: 2px;
  overflow: hidden;
}

.CommentPanelContextMenuContainer {
  border: none;
  max-width: initial;
  padding: 50px 0 10px;

  &-menuHeading,
  &-menuItem {
    font-size: 1.3rem;
    padding: 0 16px;
  }

  &-menuHeading {
    background-color: var(--primary-color-1);
    color: #f0f0f0;
    line-height: 4rem;
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
  }

  &-menuItem {
    line-height: 3.2rem;
  }
}

// NGパネル
.NGSettingPanelContainer {
  top: 42px;
  bottom: 10px;
  left: 10px;
  right: 10px;
  border-radius: 2px;
  z-index: 10;
  background-color: #fff;
  opacity: 0;
  transform: scale(0);
  transform-origin: top right;
  flex-direction: column;
  transition: .3s all $ease-out-quart;
  display: flex;

  &:not([hidden]) {
    opacity: 1;
    transform: scale(1);
  }

  &-header {
    background-color: transparent;
    height: auto;
    position: static;
  }

  &-headerText {
    display: none;
  }

  &-contentTop {
    padding: 10px 16px 0;
    display: flex;
    justify-content: space-between;
    align-items: center;
    position: static;
    top: 0;
    left: 0;
    width: 100%;

    > .GridCell {
      flex: 0 0 auto;
    }
  }

  // NG登録数
  &-num {
    width: auto;
    order: 2;
  }

  // NG追加
  &-openViewerNGRegisterButtonCell {
    all: unset;
    order: 1;
  }

  &-openViewerNGRegisterButton {
    all: unset;
    @include flatButton;
  }

  &-num,
  &-enableCheckbox {
    line-height: inherit;
    color: #888;
  }

  // NGトグル
  &-enableSettingArea {
    all: unset;
    order: 3;
  }

  &-enableCheckbox {
    .CheckboxInput {
      &:checked {
        + .Checkbox-check {
          background-color: var(--primary-color-2);

          &::before {
            background-color: var(--primary-color-1);
            transform: translate3d(100%, 0, 0);
          }
        }
      }

      + .Checkbox-check {
        width: 36px;
        height: 14px;
        background-color: #e0e0e0;
        border-radius: 18px;
        margin: 5px 0;
        transition: all .3s $ease-out-quart;

        &::before {
          content: '';
          width: 20px;
          height: 20px;
          border: none;
          background-color: #f0f0f0;
          border-radius: 100%;
          box-shadow: 0 1px 2px rgba(0,0,0,.4);
          position: absolute;
          top: calc(50% - 10px);
          left: 0;
          transition: inherit;
        }

        &::after {
          display: none;
        }
      }
    }

    .CheckboxLabel {
      display: none;
    }
  }

  &-content {
    position: static;
    flex: 1;
    display: flex;
    flex-direction: column;
  }

  &-contentMain {
    position: relative;
    top: auto;
    left: auto;
    right: auto;
    bottom: auto;
    background: none;
    flex: 1;
    display: flex;
    flex-direction: column;
    border-bottom: 1px #e0e0e0 solid;
    padding: 4px 0 0;
  }

  &-contentBottom {
    position: static;
    text-align: right;
    padding: 10px 16px;
    height: auto;
  }

  &-removeButton {
    all: unset;
    @include flatButton;
    background: none;
  }

  &-close {
    all: unset;
    @include flatButton;
    position: absolute;
    top: auto;
    right: 168px;
    bottom: 10px;

    &::before {
      content: 'キャンセル';
    }

    > svg {
      display: none;
    }
  }
}

.ViewerNGList {
  position: static;
  display: flex;
  flex-direction: column;
  height: 100%;
  line-height: 3rem;

  .Checkbox {
    height: 100%;
    display: flex;
    align-items: center;

    &Input {
      &:checked {
        + .Checkbox-check {
          border-color: var(--primary-color-1);
          background-color: var(--primary-color-1);

          &::before {
            opacity: 1;
            transform: scale(1);
          }
        }
      }
    }

    &-check {
      border: 2px #e0e0e0 solid;
      border-radius: 2px;
      width: 16px;
      height: 16px;
      box-sizing: content-box;
      background-color: #fff;
      transition: all .3s $ease-out-quart;

      &::before {
        all: unset;
        @include icon;
        content: '\f26b';
        line-height: 1.6rem;
        font-size: 1.6rem;
        font-weight: bold;
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        opacity: 0;
        color: #fff;
        transform: scale(0);
        transition: inherit;
      }

      &::after {
        display: none;
      }
    }
  }

  .GridCell {
    border: none;
    padding: 0 0 0 8px;

    &:first-child {
      padding-left: 16px;
    }
  }

  &-header {
    padding: 0;
    background: none;
    color: #b0b0b0;
    line-height: inherit;
    border-bottom: 1px #e0e0e0 solid;
  }

  &-items {
    position: static;
    flex: 1;
    color: #303030;
  }

  &-item {
    padding: 0;
    line-height: inherit;
    font-size: 1.2rem;
    border: none;

    &.is-checked {
      background-color: #f0f0f0;
    }
  }

  &-headerCheck,
  &-itemCheck {
    flex: 0 0 auto;
    width: auto;
  }

  &-itemType {
    flex: 0 0 80px;
  }

  &-itemSource {
    max-width: initial;
  }
}
